AWSTemplateFormatVersion: '2010-09-09'
Description: My Beer Log - 改善版MVP用AWS CloudFormationテンプレート

Parameters:
  DBUser:
    Type: String
    Description: RDS DBユーザー名
    Default: beerloguser
  DBPassword:
    Type: String
    Description: RDS DBパスワード（本番はSecrets Manager推奨）
    NoEcho: true
  DBName:
    Type: String
    Description: RDS DB名
    Default: beerlogdb

Resources:
  # VPC
  BeerLogVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: BeerLogVPC

  # インターネットゲートウェイ
  BeerLogInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: BeerLogIGW

  BeerLogVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref BeerLogVPC
      InternetGatewayId: !Ref BeerLogInternetGateway

  # パブリックサブネット（2AZ）
  BeerLogPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BeerLogVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: BeerLogPublicSubnetA

  BeerLogPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BeerLogVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: BeerLogPublicSubnetB

  # プライベートサブネット（2AZ）
  BeerLogPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BeerLogVPC
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: BeerLogPrivateSubnetA

  BeerLogPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BeerLogVPC
      CidrBlock: 10.0.12.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: BeerLogPrivateSubnetB

  # ルートテーブル（パブリック）
  BeerLogPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BeerLogVPC
      Tags:
        - Key: Name
          Value: BeerLogPublicRouteTable

  BeerLogPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: BeerLogVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref BeerLogPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref BeerLogInternetGateway

  BeerLogPublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BeerLogPublicSubnetA
      RouteTableId: !Ref BeerLogPublicRouteTable

  BeerLogPublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BeerLogPublicSubnetB
      RouteTableId: !Ref BeerLogPublicRouteTable

  # ルートテーブル（プライベート/NAT用）
  BeerLogPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BeerLogVPC
      Tags:
        - Key: Name
          Value: BeerLogPrivateRouteTable

  BeerLogPrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BeerLogPrivateSubnetA
      RouteTableId: !Ref BeerLogPrivateRouteTable

  BeerLogPrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BeerLogPrivateSubnetB
      RouteTableId: !Ref BeerLogPrivateRouteTable

  # NAT Gateway（1つ/AZ1のみ設置例）
  BeerLogEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  BeerLogNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt BeerLogEIP.AllocationId
      SubnetId: !Ref BeerLogPublicSubnetA
      Tags:
        - Key: Name
          Value: BeerLogNATGateway

  BeerLogPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref BeerLogPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref BeerLogNATGateway

  # DB Subnet Group（2AZ）
  BeerLogDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'BeerLog DB subnet group'
      SubnetIds:
        - !Ref BeerLogPrivateSubnetA
        - !Ref BeerLogPrivateSubnetB

  # セキュリティグループ（DB/Lambda用、VPC内通信のみ許可）
  BeerLogSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: BeerLog Security Group
      VpcId: !Ref BeerLogVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.0.0/16 # VPC内のみ許可
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # RDS（Multi-AZ例）
  BeerLogDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref BeerLogSecurityGroup
      DBSubnetGroupName: !Ref BeerLogDBSubnetGroup
      MultiAZ: true
      PubliclyAccessible: false
      BackupRetentionPeriod: 7

  # Lambda実行ロール
  BeerLogLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BeerLogLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  # Lambda関数（プライベートサブネットに配置）
  BeerLogLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: BeerLogApiHandler
      Handler: index.handler
      Role: !GetAtt BeerLogLambdaExecutionRole.Arn
      Runtime: nodejs20.x
      VpcConfig:
        SubnetIds:
          - !Ref BeerLogPrivateSubnetA
          - !Ref BeerLogPrivateSubnetB
        SecurityGroupIds:
          - !Ref BeerLogSecurityGroup
      Environment:
        Variables:
          DB_HOST: !GetAtt BeerLogDB.Endpoint.Address
          DB_USER: !Ref DBUser
          DB_PASS: !Ref DBPassword
          DB_NAME: !Ref DBName

  # API Gateway
  BeerLogApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: BeerLogApi
      Description: My Beer Log用API Gateway

  BeerLogApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BeerLogApiGateway
      ParentId: !GetAtt BeerLogApiGateway.RootResourceId
      PathPart: v1

  BeerLogApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BeerLogApiGateway
      ResourceId: !Ref BeerLogApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BeerLogLambdaFunction.Arn}/invocations

  BeerLogLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt BeerLogLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BeerLogApiGateway}/*

  # S3バケット（CloudFront OAC対応）
  BeerLogS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub beerlog-app-${AWS::AccountId}-${AWS::Region}

  # CloudFront OAC
  BeerLogCloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: BeerLogOAC
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
        Description: OAC for BeerLog S3

  # CloudFrontディストリビューション
  BeerLogCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - DomainName: !GetAtt BeerLogS3Bucket.DomainName
            Id: BeerLogS3Origin
            S3OriginConfig: {}
            OriginAccessControlId: !Ref BeerLogCloudFrontOAC
        DefaultCacheBehavior:
          TargetOriginId: BeerLogS3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: false
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

  # S3バケットポリシー（CloudFront OACのみ許可）
  BeerLogS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BeerLogS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontServicePrincipalRead
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: 's3:GetObject'
            Resource: !Sub '${BeerLogS3Bucket.Arn}/*'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${BeerLogCloudFrontDistribution}'

Outputs:
  DBEndpoint:
    Description: RDSエンドポイント
    Value: !GetAtt BeerLogDB.Endpoint.Address
  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref BeerLogCognitoUserPool
  CognitoUserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref BeerLogCognitoUserPoolClient
  S3BucketName:
    Description: 静的ホスティング用S3バケット名
    Value: !Ref BeerLogS3Bucket
  CloudFrontDomain:
    Description: CloudFrontドメイン名
    Value: !GetAtt BeerLogCloudFrontDistribution.DomainName
