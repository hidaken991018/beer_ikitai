AWSTemplateFormatVersion: 2010-09-09
Description: My Beer Log - 改善版MVP用AWS CloudFormationテンプレート

Parameters:
  Environment:
    Type: String
    Description: 環境名（dev, staging, prod）
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
  
  DBInstanceClass:
    Type: String
    Description: RDS インスタンスクラス
    Default: db.t3.micro
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.r5.large
      - db.r5.xlarge
  
  LambdaDeploymentBucket:
    Type: String
    Description: Lambda デプロイ用 S3 バケット名
    Default: beerlog-app-back
  
  LambdaCodeKey:
    Type: String
    Description: Lambda コードの S3 キー
    Default: sample.zip
  
  DBUser:
    Type: String
    Description: RDS DBユーザー名
    Default: beerloguser
  
  DBName:
    Type: String
    Description: RDS DB名
    Default: beerlogdb

Mappings:
  EnvironmentConfig:
    dev:
      DBInstanceClass: db.t3.micro
      DBMultiAZ: false
      DBBackupRetentionPeriod: 1
      ApiStageName: dev
      CloudFrontPriceClass: PriceClass_100
    staging:
      DBInstanceClass: db.t3.small
      DBMultiAZ: false
      DBBackupRetentionPeriod: 3
      ApiStageName: staging
      CloudFrontPriceClass: PriceClass_100
    prod:
      DBInstanceClass: db.t3.medium
      DBMultiAZ: true
      DBBackupRetentionPeriod: 7
      ApiStageName: prod
      CloudFrontPriceClass: PriceClass_All

Resources:
  # VPC
  BeerLogVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub BeerLog-${Environment}-VPC
        - Key: Environment
          Value: !Ref Environment

  # インターネットゲートウェイ
  BeerLogInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub BeerLog-${Environment}-IGW
        - Key: Environment
          Value: !Ref Environment

  BeerLogVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref BeerLogVPC
      InternetGatewayId: !Ref BeerLogInternetGateway

  # パブリックサブネット（2AZ）
  BeerLogPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BeerLogVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub BeerLog-${Environment}-PublicSubnetA
        - Key: Environment
          Value: !Ref Environment

  BeerLogPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BeerLogVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub BeerLog-${Environment}-PublicSubnetB
        - Key: Environment
          Value: !Ref Environment

  # プライベートサブネット（2AZ）
  BeerLogPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BeerLogVPC
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub BeerLog-${Environment}-PrivateSubnetA
        - Key: Environment
          Value: !Ref Environment

  BeerLogPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BeerLogVPC
      CidrBlock: 10.0.12.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub BeerLog-${Environment}-PrivateSubnetB
        - Key: Environment
          Value: !Ref Environment

  # ルートテーブル（パブリック）
  BeerLogPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BeerLogVPC
      Tags:
        - Key: Name
          Value: !Sub BeerLog-${Environment}-PublicRouteTable
        - Key: Environment
          Value: !Ref Environment

  BeerLogPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: BeerLogVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref BeerLogPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref BeerLogInternetGateway

  BeerLogPublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BeerLogPublicSubnetA
      RouteTableId: !Ref BeerLogPublicRouteTable

  BeerLogPublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BeerLogPublicSubnetB
      RouteTableId: !Ref BeerLogPublicRouteTable

  # ルートテーブル（プライベート/NAT用）
  BeerLogPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BeerLogVPC
      Tags:
        - Key: Name
          Value: !Sub BeerLog-${Environment}-PrivateRouteTable
        - Key: Environment
          Value: !Ref Environment

  BeerLogPrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BeerLogPrivateSubnetA
      RouteTableId: !Ref BeerLogPrivateRouteTable

  BeerLogPrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BeerLogPrivateSubnetB
      RouteTableId: !Ref BeerLogPrivateRouteTable

  # NAT Gateway（1つ/AZ1のみ設置例）
  BeerLogEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  BeerLogNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt BeerLogEIP.AllocationId
      SubnetId: !Ref BeerLogPublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub BeerLog-${Environment}-NATGateway
        - Key: Environment
          Value: !Ref Environment

  BeerLogPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref BeerLogPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref BeerLogNATGateway

  # DB Subnet Group（2AZ）
  BeerLogDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub 'BeerLog ${Environment} DB subnet group'
      DBSubnetGroupName: !Sub beerlog-${Environment}-db-subnet-group
      SubnetIds:
        - !Ref BeerLogPrivateSubnetA
        - !Ref BeerLogPrivateSubnetB
      Tags:
        - Key: Name
          Value: !Sub BeerLog-${Environment}-DBSubnetGroup
        - Key: Environment
          Value: !Ref Environment

  # セキュリティグループ（DB/Lambda用、VPC内通信のみ許可）
  BeerLogSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub BeerLog ${Environment} Security Group
      GroupName: !Sub BeerLog-${Environment}-SecurityGroup
      VpcId: !Ref BeerLogVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.0.0/16 # VPC内のみ許可
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub BeerLog-${Environment}-SecurityGroup
        - Key: Environment
          Value: !Ref Environment

  # RDS（Multi-AZ例）
  BeerLogDB:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      DBName: !Ref DBName
      DBInstanceIdentifier: !Sub beerlog-${Environment}-db
      AllocatedStorage: 20
      DBInstanceClass: !FindInMap [EnvironmentConfig, !Ref Environment, DBInstanceClass]
      Engine: postgres
      MasterUsername:
        Fn::Sub: '{{resolve:secretsmanager:${BeerLogDBSecret}:SecretString:username}}'
      MasterUserPassword:
        Fn::Sub: '{{resolve:secretsmanager:${BeerLogDBSecret}:SecretString:password}}'
      VPCSecurityGroups:
        - !Ref BeerLogSecurityGroup
      DBSubnetGroupName: !Ref BeerLogDBSubnetGroup
      MultiAZ: !FindInMap [EnvironmentConfig, !Ref Environment, DBMultiAZ]
      PubliclyAccessible: false
      BackupRetentionPeriod: !FindInMap [EnvironmentConfig, !Ref Environment, DBBackupRetentionPeriod]
      Tags:
        - Key: Name
          Value: !Sub BeerLog-${Environment}-DB
        - Key: Environment
          Value: !Ref Environment

  # Secrets Manager シークレット
  BeerLogDBSecret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      Name: !Sub beerlog-${Environment}-db-secret
      Description: !Sub 'RDS用DBユーザーとパスワード (${Environment})'
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBUser}"}'
        GenerateStringKey: password
        ExcludeCharacters: '"@/\'
        PasswordLength: 16
      Tags:
        - Key: Name
          Value: !Sub BeerLog-${Environment}-DBSecret
        - Key: Environment
          Value: !Ref Environment

  # Lambda実行ロール
  BeerLogLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub BeerLog-${Environment}-LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub BeerLog-${Environment}-LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: !Sub BeerLog-${Environment}-LambdaEC2NetworkInterfacePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub BeerLog-${Environment}-LambdaExecutionRole
        - Key: Environment
          Value: !Ref Environment

  # Lambda関数（プライベートサブネットに配置）
  BeerLogLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub BeerLog-${Environment}-ApiHandler
      Handler: bootstrap
      Description: !Sub 'My Beer Log API Lambda Function (${Environment})'
      Role: !GetAtt BeerLogLambdaExecutionRole.Arn
      Runtime: provided.al2023
      Code:
        S3Bucket: !Ref LambdaDeploymentBucket
        S3Key: !Ref LambdaCodeKey
      VpcConfig:
        SubnetIds:
          - !Ref BeerLogPrivateSubnetA
          - !Ref BeerLogPrivateSubnetB
        SecurityGroupIds:
          - !Ref BeerLogSecurityGroup
      Environment:
        Variables:
          DB_HOST: !GetAtt BeerLogDB.Endpoint.Address
          DB_USER:
            Fn::Sub: '{{resolve:secretsmanager:${BeerLogDBSecret}:SecretString:username}}'
          DB_PASS:
            Fn::Sub: '{{resolve:secretsmanager:${BeerLogDBSecret}:SecretString:password}}'
          DB_NAME: !Ref DBName
          ENVIRONMENT: !Ref Environment
      Tags:
        - Key: Name
          Value: !Sub BeerLog-${Environment}-LambdaFunction
        - Key: Environment
          Value: !Ref Environment

  # API Gateway
  BeerLogApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub BeerLog-${Environment}-Api
      Description: !Sub 'My Beer Log用API Gateway (${Environment})'
      Tags:
        - Key: Name
          Value: !Sub BeerLog-${Environment}-ApiGateway
        - Key: Environment
          Value: !Ref Environment

  BeerLogApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: BeerLogApiMethod
    Properties:
      RestApiId: !Ref BeerLogApiGateway
      StageName: v1 # ダミー（ステージリソースで上書き）

  BeerLogApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !FindInMap [EnvironmentConfig, !Ref Environment, ApiStageName]
      Description: !Sub '${Environment} ステージ'
      RestApiId: !Ref BeerLogApiGateway
      DeploymentId: !Ref BeerLogApiDeployment
      Tags:
        - Key: Name
          Value: !Sub BeerLog-${Environment}-ApiStage
        - Key: Environment
          Value: !Ref Environment

  BeerLogApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BeerLogApiGateway
      ParentId: !GetAtt BeerLogApiGateway.RootResourceId
      PathPart: v1

  BeerLogApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BeerLogApiGateway
      ResourceId: !Ref BeerLogApiResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BeerLogLambdaFunction.Arn}/invocations

  BeerLogLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt BeerLogLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${BeerLogApiGateway}/*



  # Cognito User Pool
  BeerLogCognitoUserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      UserPoolName: !Sub BeerLog-${Environment}-UserPool
      AutoVerifiedAttributes:
        - email
      UserPoolTags:
        Environment: !Ref Environment
        Name: !Sub BeerLog-${Environment}-UserPool

  # Cognito User Pool Client
  BeerLogCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub BeerLog-${Environment}-UserPoolClient
      UserPoolId: !Ref BeerLogCognitoUserPool
      GenerateSecret: false


Outputs:
  Environment:
    Description: デプロイされた環境
    Value: !Ref Environment
    Export:
      Name: !Sub ${AWS::StackName}-Environment
  
  DBEndpoint:
    Description: RDSエンドポイント
    Value: !GetAtt BeerLogDB.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DBEndpoint
  
  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref BeerLogCognitoUserPool
    Export:
      Name: !Sub ${AWS::StackName}-CognitoUserPoolId
  
  CognitoUserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref BeerLogCognitoUserPoolClient
    Export:
      Name: !Sub ${AWS::StackName}-CognitoUserPoolClientId
  
  
  ApiGatewayEndpoint:
    Description: API Gateway エンドポイント
    Value: !Sub 'https://${BeerLogApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${BeerLogApiStage}'
    Export:
      Name: !Sub ${AWS::StackName}-ApiGatewayEndpoint
  
  LambdaFunctionName:
    Description: Lambda 関数名
    Value: !Ref BeerLogLambdaFunction
    Export:
      Name: !Sub ${AWS::StackName}-LambdaFunctionName

